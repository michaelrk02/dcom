// This file is automatically generated using DCOM IDL
// Please do not edit by hand

package stub

import (
	dcom "github.com/michaelrk02/dcom"
	component "github.com/michaelrk02/dcom/example/component"
)

type Company struct {
	*dcom.ObjectStub
	obj component.Company
}

func NewCompany(f dcom.Factory, obj dcom.Object) dcom.Stub {
	stub := &Company{
		ObjectStub: dcom.NewObjectStub(f, obj),
		obj:        obj.(component.Company),
	}

	stub.AddExecutor("GetEmployees", stub.ExecuteGetEmployees)
	stub.AddExecutor("GetName", stub.ExecuteGetName)
	stub.AddExecutor("GetMetadata", stub.ExecuteGetMetadata)

	return stub
}

func (stub_ *Company) ExecuteGetEmployees(in_ dcom.Unmarshaler, out_ dcom.Marshaler) {
	keyword, err_ := in_.ReadString()
	dcom.Assert(err_)

	limit, err_ := in_.ReadIntOptional()
	dcom.Assert(err_)

	resp_, err_ := stub_.obj.GetEmployees(keyword, limit)

	dcom.Assert(out_.WriteError(err_))
	dcom.Assert(out_.WriteObjectArray(component.EmployeeToObjectArray(resp_)))
}

func (stub_ *Company) ExecuteGetName(in_ dcom.Unmarshaler, out_ dcom.Marshaler) {
	resp_, err_ := stub_.obj.GetName()

	dcom.Assert(out_.WriteError(err_))
	dcom.Assert(out_.WriteString(resp_))
}

func (stub_ *Company) ExecuteGetMetadata(in_ dcom.Unmarshaler, out_ dcom.Marshaler) {
	resp_, err_ := stub_.obj.GetMetadata()

	dcom.Assert(out_.WriteError(err_))
	dcom.Assert(out_.WriteStructure(component.MetadataToStructure(resp_)))
}
