// This file is automatically generated using DCOM IDL
// Please do not edit by hand

package component

import (
	dcom "github.com/michaelrk02/dcom"
	"reflect"
)

type Metadata struct {
	Name    string
	Address string
	Website string
	Contact Contact
}

func NewMetadata() dcom.Structure {
	return &Metadata{}
}

func (s *Metadata) Marshal(m dcom.Marshaler) error {
	var err error

	err = m.WriteString(s.Name)
	if err != nil {
		return err
	}

	err = m.WriteString(s.Address)
	if err != nil {
		return err
	}

	err = m.WriteString(s.Website)
	if err != nil {
		return err
	}

	err = m.WriteStructure(ContactToStructure(s.Contact))
	if err != nil {
		return err
	}

	return nil
}

func (s *Metadata) Unmarshal(u dcom.Unmarshaler) error {
	var err error

	s.Name, err = u.ReadString()
	if err != nil {
		return err
	}

	s.Address, err = u.ReadString()
	if err != nil {
		return err
	}

	s.Website, err = u.ReadString()
	if err != nil {
		return err
	}

	contact, err := u.ReadStructure(NewContact)
	if err != nil {
		return err
	}
	s.Contact = StructureToContact(contact)

	return nil
}

func MetadataToStructure(v Metadata) dcom.Structure {
	return &v
}

func MetadataToStructureOptional(v *Metadata) dcom.Structure {
	return v
}

func MetadataToStructureArray(v []Metadata) []dcom.Structure {
	arr := make([]dcom.Structure, len(v))
	for i := range v {
		arr[i] = MetadataToStructure(v[i])
	}
	return arr
}

func StructureToMetadata(v dcom.Structure) Metadata {
	return *v.(*Metadata)
}

func StructureToMetadataOptional(v dcom.Structure) *Metadata {
	if reflect.ValueOf(v).IsNil() {
		return nil
	}
	return v.(*Metadata)
}

func StructureToMetadataArray(v []dcom.Structure) []Metadata {
	arr := make([]Metadata, len(v))
	for i := range v {
		arr[i] = StructureToMetadata(v[i])
	}
	return arr
}
