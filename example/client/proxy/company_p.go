// This file is automatically generated using DCOM IDL
// Please do not edit by hand

package proxy

import (
	"bytes"
	uuid "github.com/google/uuid"
	dcom "github.com/michaelrk02/dcom"
	component "github.com/michaelrk02/dcom/example/component"
)

type Company struct {
	*dcom.ObjectProxy
}

func NewCompany(instanceID uuid.UUID, conn *dcom.ProxyConnection, f dcom.Factory) dcom.Object {
	return &Company{ObjectProxy: dcom.NewObjectProxy(instanceID, conn, f)}
}

func (proxy_ *Company) GetCLSID() uuid.UUID {
	return component.CLSIDCompany
}

func (proxy_ *Company) GetName() (string, error) {
	var err_ error
	var params_ bytes.Buffer

	resp_, err_ := proxy_.Conn.InvokeObject(proxy_.GetCLSID(), proxy_.GetInstanceID(), "GetName", &params_)
	if err_ != nil {
		return "", err_
	}

	out_ := dcom.NewDefaultUnmarshaler(resp_)

	errRemote_, err_ := out_.ReadError()
	if err_ != nil {
		return "", err_
	}
	if errRemote_ != nil {
		return "", errRemote_
	}

	var vRemote_ string

	vRemote_, err_ = out_.ReadString()
	if err_ != nil {
		return "", err_
	}

	return vRemote_, errRemote_
}

func (proxy_ *Company) SetName(name string) error {
	panic("method not exposed")
}

func (proxy_ *Company) GetMetadata() (component.Metadata, error) {
	var err_ error
	var params_ bytes.Buffer

	resp_, err_ := proxy_.Conn.InvokeObject(proxy_.GetCLSID(), proxy_.GetInstanceID(), "GetMetadata", &params_)
	if err_ != nil {
		return component.Metadata{}, err_
	}

	out_ := dcom.NewDefaultUnmarshaler(resp_)

	errRemote_, err_ := out_.ReadError()
	if err_ != nil {
		return component.Metadata{}, err_
	}
	if errRemote_ != nil {
		return component.Metadata{}, errRemote_
	}

	var vRemote_ component.Metadata

	vRemoteRaw_, err_ := out_.ReadStructure(component.NewMetadata)
	if err_ != nil {
		return component.Metadata{}, err_
	}
	vRemote_ = component.StructureToMetadata(vRemoteRaw_)

	return vRemote_, errRemote_
}

func (proxy_ *Company) SetMetadata(metadata component.Metadata) error {
	panic("method not exposed")
}

func (proxy_ *Company) GetEmployees(keyword string, limit *int) ([]component.Employee, error) {
	var err_ error
	var params_ bytes.Buffer

	in_ := dcom.NewDefaultMarshaler(&params_)

	err_ = in_.WriteString(keyword)
	if err_ != nil {
		return nil, err_
	}

	err_ = in_.WriteIntOptional(limit)
	if err_ != nil {
		return nil, err_
	}

	resp_, err_ := proxy_.Conn.InvokeObject(proxy_.GetCLSID(), proxy_.GetInstanceID(), "GetEmployees", &params_)
	if err_ != nil {
		return nil, err_
	}

	out_ := dcom.NewDefaultUnmarshaler(resp_)

	errRemote_, err_ := out_.ReadError()
	if err_ != nil {
		return nil, err_
	}
	if errRemote_ != nil {
		return nil, errRemote_
	}

	var vRemote_ []component.Employee

	vRemoteRaw_, err_ := out_.ReadObjectArray(proxy_.Factory)
	if err_ != nil {
		return nil, err_
	}
	vRemote_ = component.ObjectToEmployeeArray(vRemoteRaw_)

	return vRemote_, errRemote_
}

func (proxy_ *Company) AddEmployee(employee component.Employee) error {
	panic("method not exposed")
}

func (proxy_ *Company) AddEmployees(employee []component.Employee) error {
	panic("method not exposed")
}

func (proxy_ *Company) RemoveEmployee(employee component.Employee) error {
	panic("method not exposed")
}
