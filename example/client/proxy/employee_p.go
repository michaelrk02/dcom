// This file is automatically generated using DCOM IDL
// Please do not edit by hand

package proxy

import (
	"bytes"
	uuid "github.com/google/uuid"
	dcom "github.com/michaelrk02/dcom"
	component "github.com/michaelrk02/dcom/example/component"
)

type Employee struct {
	*dcom.ObjectProxy
}

func NewEmployee(instanceID uuid.UUID, conn *dcom.ProxyConnection, f dcom.Factory) dcom.Object {
	proxy := &Employee{ObjectProxy: dcom.NewObjectProxy(instanceID, conn, f)}
	proxy.Object = proxy
	return proxy
}

func (proxy_ *Employee) GetCLSID() uuid.UUID {
	return component.CLSIDEmployee
}

func (proxy_ *Employee) GetName() (string, error) {
	var err_ error
	var params_ bytes.Buffer

	resp_, err_ := proxy_.Conn.InvokeObject(proxy_.GetCLSID(), proxy_.GetInstanceID(), "GetName", &params_)
	if err_ != nil {
		return "", err_
	}

	out_ := dcom.NewDefaultUnmarshaler(resp_)

	errRemote_, err_ := out_.ReadError()
	if err_ != nil {
		return "", err_
	}
	if errRemote_ != nil {
		return "", errRemote_
	}

	var vRemote_ string

	vRemote_, err_ = out_.ReadString()
	if err_ != nil {
		return "", err_
	}

	return vRemote_, errRemote_
}

func (proxy_ *Employee) SetName(name string) error {
	var err_ error
	var params_ bytes.Buffer

	in_ := dcom.NewDefaultMarshaler(&params_)

	err_ = in_.WriteString(name)
	if err_ != nil {
		return err_
	}

	resp_, err_ := proxy_.Conn.InvokeObject(proxy_.GetCLSID(), proxy_.GetInstanceID(), "SetName", &params_)
	if err_ != nil {
		return err_
	}

	out_ := dcom.NewDefaultUnmarshaler(resp_)

	errRemote_, err_ := out_.ReadError()
	if err_ != nil {
		return err_
	}
	if errRemote_ != nil {
		return errRemote_
	}

	return errRemote_
}

func (proxy_ *Employee) GetSalary() (float64, error) {
	var err_ error
	var params_ bytes.Buffer

	resp_, err_ := proxy_.Conn.InvokeObject(proxy_.GetCLSID(), proxy_.GetInstanceID(), "GetSalary", &params_)
	if err_ != nil {
		return 0.0, err_
	}

	out_ := dcom.NewDefaultUnmarshaler(resp_)

	errRemote_, err_ := out_.ReadError()
	if err_ != nil {
		return 0.0, err_
	}
	if errRemote_ != nil {
		return 0.0, errRemote_
	}

	var vRemote_ float64

	vRemote_, err_ = out_.ReadFloat()
	if err_ != nil {
		return 0.0, err_
	}

	return vRemote_, errRemote_
}

func (proxy_ *Employee) SetSalary(salary float64) error {
	var err_ error
	var params_ bytes.Buffer

	in_ := dcom.NewDefaultMarshaler(&params_)

	err_ = in_.WriteFloat(salary)
	if err_ != nil {
		return err_
	}

	resp_, err_ := proxy_.Conn.InvokeObject(proxy_.GetCLSID(), proxy_.GetInstanceID(), "SetSalary", &params_)
	if err_ != nil {
		return err_
	}

	out_ := dcom.NewDefaultUnmarshaler(resp_)

	errRemote_, err_ := out_.ReadError()
	if err_ != nil {
		return err_
	}
	if errRemote_ != nil {
		return errRemote_
	}

	return errRemote_
}

func (proxy_ *Employee) GetTenure() (int, error) {
	var err_ error
	var params_ bytes.Buffer

	resp_, err_ := proxy_.Conn.InvokeObject(proxy_.GetCLSID(), proxy_.GetInstanceID(), "GetTenure", &params_)
	if err_ != nil {
		return 0, err_
	}

	out_ := dcom.NewDefaultUnmarshaler(resp_)

	errRemote_, err_ := out_.ReadError()
	if err_ != nil {
		return 0, err_
	}
	if errRemote_ != nil {
		return 0, errRemote_
	}

	var vRemote_ int

	vRemote_, err_ = out_.ReadInt()
	if err_ != nil {
		return 0, err_
	}

	return vRemote_, errRemote_
}

func (proxy_ *Employee) SetTenure(tenure int) error {
	var err_ error
	var params_ bytes.Buffer

	in_ := dcom.NewDefaultMarshaler(&params_)

	err_ = in_.WriteInt(tenure)
	if err_ != nil {
		return err_
	}

	resp_, err_ := proxy_.Conn.InvokeObject(proxy_.GetCLSID(), proxy_.GetInstanceID(), "SetTenure", &params_)
	if err_ != nil {
		return err_
	}

	out_ := dcom.NewDefaultUnmarshaler(resp_)

	errRemote_, err_ := out_.ReadError()
	if err_ != nil {
		return err_
	}
	if errRemote_ != nil {
		return errRemote_
	}

	return errRemote_
}

func (proxy_ *Employee) GetMarried() (bool, error) {
	var err_ error
	var params_ bytes.Buffer

	resp_, err_ := proxy_.Conn.InvokeObject(proxy_.GetCLSID(), proxy_.GetInstanceID(), "GetMarried", &params_)
	if err_ != nil {
		return false, err_
	}

	out_ := dcom.NewDefaultUnmarshaler(resp_)

	errRemote_, err_ := out_.ReadError()
	if err_ != nil {
		return false, err_
	}
	if errRemote_ != nil {
		return false, errRemote_
	}

	var vRemote_ bool

	vRemote_, err_ = out_.ReadBool()
	if err_ != nil {
		return false, err_
	}

	return vRemote_, errRemote_
}

func (proxy_ *Employee) SetMarried(married bool) error {
	var err_ error
	var params_ bytes.Buffer

	in_ := dcom.NewDefaultMarshaler(&params_)

	err_ = in_.WriteBool(married)
	if err_ != nil {
		return err_
	}

	resp_, err_ := proxy_.Conn.InvokeObject(proxy_.GetCLSID(), proxy_.GetInstanceID(), "SetMarried", &params_)
	if err_ != nil {
		return err_
	}

	out_ := dcom.NewDefaultUnmarshaler(resp_)

	errRemote_, err_ := out_.ReadError()
	if err_ != nil {
		return err_
	}
	if errRemote_ != nil {
		return errRemote_
	}

	return errRemote_
}
